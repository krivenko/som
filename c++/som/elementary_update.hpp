/*******************************************************************************
 *
 * SOM: Stochastic Optimization Method for Analytic Continuation
 *
 * Copyright (C) 2016-2024 Igor Krivenko
 *
 * SOM is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * SOM is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * SOM. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
#pragma once

#include <array>
#include <memory>
#include <utility>

#include <triqs/mc_tools.hpp>

#include "cache_index.hpp"
#include "config_update.hpp"
#include "kernels/all.hpp"
#include "numerics/expabs_distribution.hpp"
#include "update_cc.hpp"

namespace som {

template <typename> struct mc_data;

// Common part of all elementary updates
template <typename KernelType> class elementary_update {

  mc_data<KernelType>& data;
  triqs::mc_tools::random_generator& rng;
  cache_index& ci;
  KernelType const& kern;

#ifdef EXT_DEBUG
  std::pair<double, double> energy_window;
  double width_min;
  double weight_min;
#endif

  expabs_distribution<triqs::mc_tools::random_generator> const dist;

protected:
  enum parameter_change_t : int { full = 0, half = 1, opt = 2 };

  using cc_update_t = update_consistent_constraints<KernelType>;

private:
  std::shared_ptr<cc_update_t> cc_update;

  parameter_change_t selected_parameter_change = {};

  // Configuration updates generated by :math:`\delta\xi`, :math:`\delta\xi/2`
  // and :math:`\delta\xi_{opt}:
  std::array<config_update, 3> update;

  // :math:`\chi^2(\xi+\delta\xi)`, :math:`\chi^2(\xi+\delta\xi/2)` and
  // :math:`\chi^2(\xi+\delta\xi_{opt})`
  std::array<double, 3> new_objf_value;

protected:
  // Accessors for derived classes
  [[nodiscard]] inline mc_data<KernelType>& get_data() { return data; }
  [[nodiscard]] inline triqs::mc_tools::random_generator& get_rng() {
    return rng;
  }
  [[nodiscard]] inline cache_index& get_ci() { return ci; }
  [[nodiscard]] inline parameter_change_t
  get_selected_parameter_change() const {
    return selected_parameter_change;
  }
  [[nodiscard]] inline config_update& get_update(parameter_change_t u) {
    // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-constant-array-index)
    return update[u];
  }

  // Generate change of a parameter :math:`\delta\xi` (see Sec. 3.4)
  [[nodiscard]] inline double generate_parameter_change(double x_min,
                                                        double x_max) const {
    return (x_min == x_max) ? x_min : dist(x_min, x_max);
  }

  // Returns (true,:math:`\delta\xi_{opt}`) (see eq. (41)), if
  // :math:`\delta\xi_{opt} corresponds to a minimum within [dxi_min, dxi_min[
  // Otherwise returns (false,0)
  std::pair<bool, double>
  optimize_parameter_change(double dxi, double dxi_min, double dxi_max);

  // Make the final choice between :math:`\delta\xi`, :math:`\delta\xi/2`,
  // and, optionally, :math:`\delta\xi_{opt}`.
  void select_parameter_change(bool consider_opt);

  // Manually set selected_parameter_change and update new_objf_value
  void set_parameter_change(parameter_change_t parameter_change);

  // Returns Metropolis ratio for the currently selected update
  [[nodiscard]] double transition_probability() const;

  void attempt_cc_update() {
    if(cc_update) (*cc_update)();
  }

public:
#ifdef EXT_DEBUG
  elementary_update(mc_data<KernelType>& data,
                    triqs::mc_tools::random_generator& rng,
                    cache_index& ci,
                    std::shared_ptr<cc_update_t> cc_update,
                    std::pair<double, double> energy_window,
                    double width_min,
                    double weight_min);
#else
  elementary_update(mc_data<KernelType>& data,
                    triqs::mc_tools::random_generator& rng,
                    cache_index& ci,
                    std::shared_ptr<cc_update_t> cc_update);
#endif

  double accept();
  void reject();
};

EXTERN_TEMPLATE_CLASS_FOR_EACH_KERNEL(elementary_update)

} // namespace som
